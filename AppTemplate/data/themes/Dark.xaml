<!-- Dark Skin -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib">
    <!--Control colors.-->
    <Color x:Key="DarkForegroundColor">#000000</Color>
    <Color x:Key="LightControlForegroundColor">#eeeeee</Color>
    <Color x:Key="PrimaryLightColor">#c40006</Color>
    <Color x:Key="SecondaryLightColor">#440000</Color>
    <Color x:Key="PrimaryDarkBackgroundColor">#000000</Color>
    <Color x:Key="SecondaryDarkBackgroundColor">#161616</Color>
    <Color x:Key="Transparent">#00000000</Color>
    <Color x:Key="DarkItemHoverColor">#666666 </Color>
    <Color x:Key="DarkItemHoverColor2">#aaffffff</Color>
    <Color x:Key="HeaderBGColor">#440000</Color>
    
    <!--Color brushes.-->
    <SolidColorBrush  x:Key="DarkForegroundBrush" Color="{StaticResource LightControlForegroundColor}"/>
    <SolidColorBrush  x:Key="LightControlForegroundBrush" Color="{StaticResource LightControlForegroundColor}"/>
    <SolidColorBrush  x:Key="PrimaryLightBrush" Color="{StaticResource PrimaryLightColor}"/>
    <SolidColorBrush  x:Key="SecondaryLightBrush" Color="{StaticResource SecondaryLightColor}"/>
    <SolidColorBrush  x:Key="PrimaryDarkBackgroundBrush" Color="{StaticResource PrimaryDarkBackgroundColor}"/>
    <SolidColorBrush  x:Key="SecondaryDarkBackgroundBrush" Color="{StaticResource SecondaryDarkBackgroundColor}"/>
    <SolidColorBrush  x:Key="TransparentBrush" Color="{StaticResource Transparent}"/>
    <SolidColorBrush  x:Key="DarkItemHoverBrush" Color="{StaticResource DarkItemHoverColor}"/>
    <SolidColorBrush  x:Key="DarkItemHoverBrush2" Color="{StaticResource DarkItemHoverColor}" Opacity="0.4" />
    <SolidColorBrush  x:Key="HeaderBGBrush" Color="{StaticResource HeaderBGColor}" />
    
    <!-- Controls Defaults-->
    <System:Double x:Key="DefaultFontSize">16</System:Double>

    <!-- Storyboards -->
    <Storyboard x:Key="OverlayChange" AutoReverse="True" RepeatBehavior="Forever">
        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="Opacity"  By="0.1" Duration="0:0:1" BeginTime="0:0:0"/>
    </Storyboard>
    <Storyboard x:Key="StopOverlayChange">
        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="Opacity"  From="0" To="0" Duration="0:0:1"/>
    </Storyboard>
    <Storyboard x:Key="Enlarge" AutoReverse="True" RepeatBehavior="Forever">
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.05"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.05"/>
    </Storyboard>
    
    <!-- Button -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1."/>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="buttonBorder"   BorderBrush="{StaticResource SecondaryLightBrush}" BorderThickness="1" CornerRadius="2" Background="{StaticResource PrimaryLightBrush}">
                        <Grid>
                            <Rectangle x:Name="Overlay" Fill="White" Opacity="0"/>
                            <TextBlock  FontSize="{StaticResource DefaultFontSize}" FontWeight="Bold" Typography.Capitals="AllSmallCaps" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource DarkForegroundBrush}" Text="{TemplateBinding Content}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="1" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--Animaiton on hover-->
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="ButtonMouseHoverStoryboard" Storyboard="{StaticResource Enlarge}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="ButtonMouseHoverStoryboard"  />
                            </Trigger.ExitActions>
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2" />
                            <!--<Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.05" ScaleY="1.05"/>
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.05" />
                            <Setter TargetName="Overlay" Property="Fill" Value="Black" />
                            <Setter Property="RenderTransformOrigin" Value="0.2, 0.2"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.05" ScaleY="1.05"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Window-->
    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
    </Style>

    <!--Grid BG-->
    <Style TargetType="{x:Type Grid}">
        <Style.Triggers>
            <Trigger Property="Tag" Value="gridBG">
                <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="Tag" Value="gridHeader">
                <Setter Property="Background" Value="{StaticResource HeaderBGBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TextBox-->

    
    <!--Label-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
    </Style>
    
    <!--TextBox-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>

    <!--PasswordBox-->
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>

    <!--Separator-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Height="1" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type 
                            }}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu-->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                       Background="{TemplateBinding BorderBrush}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>
                            <ContentPresenter Grid.Column="2" Margin="8,1,8,1" x:Name="IGTHost" ContentSource="InputGestureText" VerticalAlignment="Center"/>
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource DarkItemHoverBrush2}" BorderThickness="1" Padding="2,2,2,2">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}" TargetName="Border"/>
                        </Trigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>
                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!--  Background="{StaticResource PrimaryLightBrush}" -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{StaticResource DarkItemHoverBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DarkItemHoverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>
    
    <!--Status bar-->
    <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Padding="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{StaticResource DarkItemHoverColor}" Offset="0.0" />
                                        <GradientStop Color="{StaticResource SecondaryDarkBackgroundColor}" Offset="0.15" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type StatusBarItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <ContentPresenter Margin="1" Name="ContentSite" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--PROGRESS BAR RAINBOW-->
    <Duration x:Key="ColorChangeTimeSpan">0:0:1</Duration>
    <Storyboard x:Key="FgChange" AutoReverse="False" RepeatBehavior="Forever" >
        <ColorAnimation  BeginTime="0:0:0" From="#FF0000" To="#FFFF00" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:1" To="#00FF00" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:2" To="#00FFFF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:3" To="#0000FF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:4" To="#FF00FF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:5" To="#FF0000" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
    </Storyboard>
    <SolidColorBrush  x:Key="RedBrush" Color="#FF0000" />  
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource RedBrush}" />
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsVisible"  Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ProgressBarVisible" Storyboard="{StaticResource FgChange}" />
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
<!--</SnippetYellowSkinMARKUP2>-->